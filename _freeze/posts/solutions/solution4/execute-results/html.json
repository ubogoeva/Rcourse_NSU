{
  "hash": "fca658464280d73f9a16b53947d61f4c",
  "result": {
    "markdown": "---\ntitle: \"Решения по четвертой лекции\"\ndate: '24 March 2023'\nauthor: 'Elena U'\nexecute: \n  echo: true\neditor: visual\ncategories: task\ndraft: true\n---\n\n\nСоставлены в формате задание - ответ к нему.\n\nРассчитано на самопроверку: ваша задача написать такой код, чтобы совпал с моим правильным ответом. Плюс есть еще несколько заданий на подумать и вспомнить материал лекции.\n\n**Не стесняйтесь гуглить**, это необходимо для решения многих задач в программировании, которые могут встретиться в реальной жизни.\n\nЕсли вдруг найдутся ошибки/опечатки, пишите на почту `e.ubogoeva@alumni.nsu.ru` или в телеграм. Вопросы по заданиям также можно писать на почту или в телеграм, телеграм чуть предпочтительнее.\n\n## Установка `tidyverse`\n\nСначала необходимо установить и загрузить `tidyverse`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('tidyverse')\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## Работа с пайпами\n\nПерепишите следующие выражения с помощью пайпа `%>%`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsin(log(sqrt(1:10), 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.0000000 0.1499473 0.2363043 0.2965040 0.3424140 0.3793333 0.4100866\n [8] 0.4363562 0.4592238 0.4794255\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"Корень из\", 2, \"равен\", sqrt(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Корень из\"       \"2\"               \"равен\"           \"1.4142135623731\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n2 %>% \n  c(\"Корень из\", ., \"равен\", sqrt(.))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Корень из\"       \"2\"               \"равен\"           \"1.4142135623731\"\n```\n:::\n:::\n\n\n## Работа со столбцами `dplyr::select()`\n\nЗагрузка данных:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_units <- read_tsv('https://raw.githubusercontent.com/ubogoeva/tidyverse_tutorial/master/data/wc3_heroes.txt',\n                      col_names = TRUE, \n                      na = '-', \n                      name_repair = 'minimal') %>% \n  janitor::clean_names()\n```\n:::\n\n\n-   Выберите столбец `hp`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      select(hp)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 71 × 1\n          hp\n       <dbl>\n     1   220\n     2   220\n     3   420\n     4   535\n     5   835\n     6   290\n     7   325\n     8   600\n     9   200\n    10   360\n    # … with 61 more rows\n    ```\n    :::\n    :::\n\n\n-   Выберите столбцы `unit`, `race`, `gold`, `armor`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      select(unit, race, gold, armor)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 71 × 4\n       unit           race   gold armor\n       <chr>          <chr> <dbl> <dbl>\n     1 Peasant        Human    75     0\n     2 Militia        Human    NA     4\n     3 Footman        Human   135     2\n     4 Rifleman       Human   205     0\n     5 Knight         Human   245     5\n     6 Priest         Human   135     0\n     7 Sorceress      Human   155     0\n     8 Spell Breaker  Human   215     3\n     9 Flying Machine Human    90     2\n    10 Mortar Team    Human   180     0\n    # … with 61 more rows\n    ```\n    :::\n    :::\n\n\n-   Выберите столбцы с `hp` по `sight`, и с `cooldown` по `range`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      select(hp:sight, cooldown:range)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 71 × 7\n          hp armor_type armor sight cooldown   dps range\n       <dbl> <chr>      <dbl> <dbl>    <dbl> <dbl> <dbl>\n     1   220 Medium         0    80     2     2.75     0\n     2   220 Heavy          4   140     1.2  10.4      0\n     3   420 Heavy          2   140     1.35  9.26     0\n     4   535 Medium         0   140     1.5  14       40\n     5   835 Heavy          5   140     1.4  24.3      0\n     6   290 Unarmored      0   140     2     4.25    60\n     7   325 Unarmored      0   140     1.75  6.29    60\n     8   600 Medium         3   140     1.9   7.37    25\n     9   200 Heavy          2   180     2.5   3        0\n    10   360 Heavy          0   140     3.5  16.6    115\n    # … with 61 more rows\n    ```\n    :::\n    :::\n\n\n-   Выведите столбец `gold` в качестве вектора\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      pull(gold)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n     [1]  75  NA 135 205 245 135 155 215  90 180 195 280 200  NA  NA  NA  NA  75 200\n    [20] 135 135 220 180 280 130 145 195 255 265 160  NA  NA  NA  NA  60 130 195 210\n    [39] 145 255  NA 425 425 160 135  NA 155  NA 330 330  NA  NA  NA  75 120 215 185\n    [58] 240 230 145 155 385  NA  NA  NA  NA  NA  NA  NA 200  NA\n    ```\n    :::\n    :::\n\n\n-   Выведите все столбцы кроме первого `unit` (отрицательная индексация с помощью `!`)\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      select(!unit)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 71 × 20\n       race   gold  wood   pop    hp armor_…¹ armor sight speed  time groun…² damage\n       <chr> <dbl> <dbl> <dbl> <dbl> <chr>    <dbl> <dbl> <dbl> <dbl> <chr>    <dbl>\n     1 Human    75     0     1   220 Medium       0    80   190    15 Normal     5.5\n     2 Human    NA    NA     1   220 Heavy        4   140   270    NA Normal    12.5\n     3 Human   135     0     2   420 Heavy        2   140   270    20 Normal    12.5\n     4 Human   205    30     3   535 Medium       0   140   270    26 Pierce    21  \n     5 Human   245    60     4   835 Heavy        5   140   350    45 Normal    34  \n     6 Human   135    10     2   290 Unarmor…     0   140   270    28 Magic      8.5\n     7 Human   155    20     2   325 Unarmor…     0   140   270    30 Magic     11  \n     8 Human   215    30     3   600 Medium       3   140   300    28 Normal    14  \n     9 Human    90    30     1   200 Heavy        2   180   400    13 Siege      7.5\n    10 Human   180    70     3   360 Heavy        0   140   270    40 Siege     58  \n    # … with 61 more rows, 8 more variables: cooldown <dbl>, dps <dbl>,\n    #   range <dbl>, air_attack <chr>, damage_2 <dbl>, cooldown_2 <dbl>,\n    #   dps_2 <dbl>, range_2 <dbl>, and abbreviated variable names ¹​armor_type,\n    #   ²​ground_attack\n    ```\n    :::\n    :::\n\n\n## Работа со строками `dplyr::filter()`, `dplyr::slice()`\n\n-   Выберите юнитов, показатель здоровья `hp` которых больше 950\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_units %>% \n  filter(hp > 950)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 21\n   unit    race   gold  wood   pop    hp armor…¹ armor sight speed  time groun…²\n   <chr>   <chr> <dbl> <dbl> <dbl> <dbl> <chr>   <dbl> <dbl> <dbl> <dbl> <chr>  \n 1 Phoenix Human    NA    NA    NA  1250 Light       1   160   320    NA Magic  \n 2 Tauren  Orc     280    80     5  1300 Heavy       3   140   270    44 Normal \n 3 Kodo B… Orc     255    60     4  1000 Unarmo…     1   140   220    30 Pierce \n 4 DoC Be… N.Elf    NA    NA     4   960 Heavy       3   140   270    NA Normal \n 5 Mounta… N.Elf   425   100     7  1600 Medium      4   120   270    45 Normal \n 6 Mounta… N.Elf   425   100     7  1600 Medium     10   120   270    45 Siege  \n 7 Chimae… N.Elf   330    70     5  1000 Light       2   160   250    65 Magic  \n 8 Chimae… N.Elf   330    70     5  1000 Light       2   160   250    65 Siege  \n 9 Avatar… N.Elf    NA    NA    NA  1200 Heavy       2   120   320    NA Normal \n10 Abomin… Unde…   240    70     4  1175 Heavy       2   140   270    40 Normal \n11 Frost … Unde…   385   120     7  1350 Light       1   160   270    65 Magic  \n12 Infern… Unde…    NA    NA    NA  1500 Heavy       6   140   320    NA Chaos  \n# … with 9 more variables: damage <dbl>, cooldown <dbl>, dps <dbl>,\n#   range <dbl>, air_attack <chr>, damage_2 <dbl>, cooldown_2 <dbl>,\n#   dps_2 <dbl>, range_2 <dbl>, and abbreviated variable names ¹​armor_type,\n#   ²​ground_attack\n```\n:::\n:::\n\n\n-   Выберите юнитов орков (`Orc`) с легким (`Light`) типом брони (`armor_type`)\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      filter(race == 'Orc' & armor_type == 'Light')\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 2 × 21\n      unit     race   gold  wood   pop    hp armor…¹ armor sight speed  time groun…²\n      <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <chr>   <dbl> <dbl> <dbl> <dbl> <chr>  \n    1 Wind Ri… Orc     265    40     4   570 Light       0   160   320    35 Pierce \n    2 Troll B… Orc     160    40     2   325 Light       0   140   320    28 Siege  \n    # … with 9 more variables: damage <dbl>, cooldown <dbl>, dps <dbl>,\n    #   range <dbl>, air_attack <chr>, damage_2 <dbl>, cooldown_2 <dbl>,\n    #   dps_2 <dbl>, range_2 <dbl>, and abbreviated variable names ¹​armor_type,\n    #   ²​ground_attack\n    ```\n    :::\n    :::\n\n\n-   Выведите первые 6 юнитов `Undead` с максимальным показателем затраченного дерева (`wood`).\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      filter(race == 'Undead') %>% \n      slice_max(wood, n = 6)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 7 × 21\n      unit     race   gold  wood   pop    hp armor…¹ armor sight speed  time groun…²\n      <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <chr>   <dbl> <dbl> <dbl> <dbl> <chr>  \n    1 Frost W… Unde…   385   120     7  1350 Light       1   160   270    65 Magic  \n    2 Abomina… Unde…   240    70     4  1175 Heavy       2   140   270    40 Normal \n    3 Meat Wa… Unde…   230    50     4   380 Heavy       2   140   220    45 Siege  \n    4 Crypt F… Unde…   215    40     3   550 Medium      0   140   270    30 Pierce \n    5 Obsidia… Unde…   200    35     3   550 Heavy       4   120   270    45 Magic  \n    6 Gargoyle Unde…   185    30     2   410 Unarmo…     3   160   350    35 Pierce \n    7 Banshee  Unde…   155    30     2   285 Unarmo…     0   140   270    28 Magic  \n    # … with 9 more variables: damage <dbl>, cooldown <dbl>, dps <dbl>,\n    #   range <dbl>, air_attack <chr>, damage_2 <dbl>, cooldown_2 <dbl>,\n    #   dps_2 <dbl>, range_2 <dbl>, and abbreviated variable names ¹​armor_type,\n    #   ²​ground_attack\n    ```\n    :::\n    :::\n\n\n    > Хм, почему-то вывелось 7 строчек. Почему это произошло, можно узнать, прочитав справку функции `slice_max()` (аргумент `with_ties`).\n\n-   Попробуем вывести только 6 строчек в предыдущем задании.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      filter(race == 'Undead') %>% \n      slice_max(wood, n = 6, with_ties = FALSE)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 6 × 21\n      unit     race   gold  wood   pop    hp armor…¹ armor sight speed  time groun…²\n      <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <chr>   <dbl> <dbl> <dbl> <dbl> <chr>  \n    1 Frost W… Unde…   385   120     7  1350 Light       1   160   270    65 Magic  \n    2 Abomina… Unde…   240    70     4  1175 Heavy       2   140   270    40 Normal \n    3 Meat Wa… Unde…   230    50     4   380 Heavy       2   140   220    45 Siege  \n    4 Crypt F… Unde…   215    40     3   550 Medium      0   140   270    30 Pierce \n    5 Obsidia… Unde…   200    35     3   550 Heavy       4   120   270    45 Magic  \n    6 Gargoyle Unde…   185    30     2   410 Unarmo…     3   160   350    35 Pierce \n    # … with 9 more variables: damage <dbl>, cooldown <dbl>, dps <dbl>,\n    #   range <dbl>, air_attack <chr>, damage_2 <dbl>, cooldown_2 <dbl>,\n    #   dps_2 <dbl>, range_2 <dbl>, and abbreviated variable names ¹​armor_type,\n    #   ²​ground_attack\n    ```\n    :::\n    :::\n\n\nНо вообще лучше сохранять дефолтное значение параметра `with_ties`\n\n## Создание колонок `dplyr::mutate()`\n\n-   Создайте новую колонку `is_air_attack`, которая будет заполнена `TRUE`, если у юнита есть воздушная атака (`air_attack`), и `FALSE`, если нет. Выведите на печать колонки `unit`, `race`, `air_attack` и `is_air_attack`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      mutate(is_air_attack = !is.na(air_attack)) %>% \n      select(unit, race, air_attack, is_air_attack)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 71 × 4\n       unit           race  air_attack is_air_attack\n       <chr>          <chr> <chr>      <lgl>        \n     1 Peasant        Human <NA>       FALSE        \n     2 Militia        Human <NA>       FALSE        \n     3 Footman        Human <NA>       FALSE        \n     4 Rifleman       Human Pierce     TRUE         \n     5 Knight         Human <NA>       FALSE        \n     6 Priest         Human Magic      TRUE         \n     7 Sorceress      Human Magic      TRUE         \n     8 Spell Breaker  Human <NA>       FALSE        \n     9 Flying Machine Human Pierce     TRUE         \n    10 Mortar Team    Human <NA>       FALSE        \n    # … with 61 more rows\n    ```\n    :::\n    :::\n\n\n-   Создайте колонку `how_fast`, заполненную значениями: если скорость `speed` больше 270 - fast, равно 270 - middle, меньше 270 - slow. Выведите на печать колонки `unit`, `race`, `speed`, `how_fast`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      mutate(how_fast = case_when(speed > 270 ~ 'fast',\n                                  speed == 270 ~ 'middle',\n                                  TRUE ~ 'slow')) %>% \n      select(unit, race, speed, how_fast)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 71 × 4\n       unit           race  speed how_fast\n       <chr>          <chr> <dbl> <chr>   \n     1 Peasant        Human   190 slow    \n     2 Militia        Human   270 middle  \n     3 Footman        Human   270 middle  \n     4 Rifleman       Human   270 middle  \n     5 Knight         Human   350 fast    \n     6 Priest         Human   270 middle  \n     7 Sorceress      Human   270 middle  \n     8 Spell Breaker  Human   300 fast    \n     9 Flying Machine Human   400 fast    \n    10 Mortar Team    Human   270 middle  \n    # … with 61 more rows\n    ```\n    :::\n    :::\n\n\n## Сортировка `dplyr::arrange()`\n\n-   Отсортируйте колонку `dps` по убыванию, выберите колонки `unit`, `race`, `damage`, `cooldown`, `dps`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_units %>% \n  arrange(desc(dps)) %>% \n  select(unit, race, damage, cooldown, dps)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 71 × 5\n   unit              race   damage cooldown   dps\n   <chr>             <chr>   <dbl>    <dbl> <dbl>\n 1 Phoenix           Human    68       1.4   48.6\n 2 Infernal          Undead   54.5     1.35  40.4\n 3 Frost Wyrm        Undead  104       3     34.7\n 4 Water Elemental 3 Human    45       1.5   30  \n 5 Chimaera          N.Elf    75       2.5   30  \n 6 DoC Bear Form     N.Elf    36.5     1.5   24.3\n 7 Knight            Human    34       1.4   24.3\n 8 Siege Engine      Human    50       2.1   23.8\n 9 Water Elemental 2 Human    35       1.5   23.3\n10 Gryphon Rider     Human    50       2.2   22.7\n# … with 61 more rows\n```\n:::\n:::\n\n\n-   Отсортируйте колонку `hp` по возрастанию, `armor` по убыванию, выберите `unit`, `race`, `hp`, `armor`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      arrange(hp, desc(armor)) %>% \n      select(unit, race, hp, armor)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 71 × 4\n       unit             race      hp armor\n       <chr>            <chr>  <dbl> <dbl>\n     1 Serpent Ward     Orc       75     0\n     2 Wisp             N.Elf    120     0\n     3 Shade            Undead   125     0\n     4 DoC Druid Form   N.Elf    130     1\n     5 Carrion Beetle 1 Undead   140     2\n     6 Skeleton Warrior Undead   180     1\n     7 Flying Machine   Human    200     2\n     8 Spirit Wolf      Orc      200     0\n     9 Militia          Human    220     4\n    10 Peasant          Human    220     0\n    # … with 61 more rows\n    ```\n    :::\n    :::\n\n\n## Аггрегация `group_by()` + `summarise()`\n\n-   Посчитайте средний урон и здоровье для юнитов, сгруппированных по типам брони (`armor_type`). Можно сделать это несколькими способами.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_units %>% \n  group_by(armor_type) %>% \n  summarise(mean_damage = mean(damage, na.rm = TRUE),\n            mean_hp = mean(hp, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  armor_type   mean_damage mean_hp\n  <chr>              <dbl>   <dbl>\n1 Fort                50      700 \n2 Heavy               28.3    534.\n3 Invulnerable        16      500 \n4 Light               42.9    819.\n5 Medium              20.3    514.\n6 Unarmored           13.6    423.\n```\n:::\n\n```{.r .cell-code}\nwc3_units %>% \n  group_by(armor_type) %>% \n  summarise(across(c(damage, hp), function(x) mean(x, na.rm = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  armor_type   damage    hp\n  <chr>         <dbl> <dbl>\n1 Fort           50    700 \n2 Heavy          28.3  534.\n3 Invulnerable   16    500 \n4 Light          42.9  819.\n5 Medium         20.3  514.\n6 Unarmored      13.6  423.\n```\n:::\n:::\n\n\n-   Подсчитайте средние по всем числовым переменным, группируя по типу брони. Подсказка: здесь пригодится функция `across()`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    wc3_units %>% \n      group_by(armor_type) %>% \n      summarise(across(where(is.numeric), function(x) mean(x, na.rm = TRUE)))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 6 × 17\n      armor_type    gold  wood    pop    hp   armor sight speed  time damage coold…¹\n      <chr>        <dbl> <dbl>  <dbl> <dbl>   <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl>\n    1 Fort          195   60     3     700    2      140   220   55     50      2.1 \n    2 Heavy         200.  45.4   2.47  534.   1.76   130.  276.  35.6   28.3    1.85\n    3 Invulnerable  NaN  NaN   NaN     500  NaN      120   270  NaN     16      1.35\n    4 Light         263.  58.1   4.1   819.   1      155.  311.  44.5   42.9    1.94\n    5 Medium        181.  30     2.47  514.   1.2    126   269.  24.1   20.3    2.11\n    6 Unarmored     164.  28.5   2.36  423.   0.429  144.  296.  30.4   13.6    1.80\n    # … with 6 more variables: dps <dbl>, range <dbl>, damage_2 <dbl>,\n    #   cooldown_2 <dbl>, dps_2 <dbl>, range_2 <dbl>, and abbreviated variable name\n    #   ¹​cooldown\n    ```\n    :::\n    :::\n\n\n## Преобразование таблиц `pivot_longer()`, `pivot_wider()`\n\nСначала создадим таблицу\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_dps <- wc3_units %>% \n  mutate(if_summon = if_else((pop == 0) | is.na(pop), \n                            'summoned', 'not_summoned')) %>% \n  group_by(race, if_summon) %>% \n  summarise(mean_dps = mean(dps, na.rm = TRUE)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'race'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nwc3_dps\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n# Groups:   race [4]\n  race   if_summon    mean_dps\n  <chr>  <chr>           <dbl>\n1 Human  not_summoned     12.0\n2 Human  summoned         28.8\n3 N.Elf  not_summoned     14.8\n4 N.Elf  summoned         14.5\n5 Orc    not_summoned     11.3\n6 Orc    summoned         14.4\n7 Undead not_summoned     12.8\n8 Undead summoned         14.7\n```\n:::\n:::\n\n\nТеперь попробуем превратить таблицу в широкую\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_dps_wide <- wc3_dps %>% \n  pivot_wider(id_cols = race, names_from = if_summon, \n              values_from = mean_dps)\nwc3_dps_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n# Groups:   race [4]\n  race   not_summoned summoned\n  <chr>         <dbl>    <dbl>\n1 Human          12.0     28.8\n2 N.Elf          14.8     14.5\n3 Orc            11.3     14.4\n4 Undead         12.8     14.7\n```\n:::\n:::\n\n\nПолученную таблицу превратить обратно в длинную\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_dps_wide %>% \n  pivot_longer(cols = c(not_summoned, summoned), \n               names_to = 'if_summon', \n               values_to = 'mean_dps')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n# Groups:   race [4]\n  race   if_summon    mean_dps\n  <chr>  <chr>           <dbl>\n1 Human  not_summoned     12.0\n2 Human  summoned         28.8\n3 N.Elf  not_summoned     14.8\n4 N.Elf  summoned         14.5\n5 Orc    not_summoned     11.3\n6 Orc    summoned         14.4\n7 Undead not_summoned     12.8\n8 Undead summoned         14.7\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}