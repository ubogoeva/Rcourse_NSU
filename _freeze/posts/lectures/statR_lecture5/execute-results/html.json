{
  "hash": "565fe922096bc7ced304695ba47e0523",
  "result": {
    "markdown": "---\ntitle: \"Язык программирования R для анализа данных: лекция 5\"\nsubtitle: 'Визуализация в R, введение в `ggplot2`'\nauthor: \"Elena U\"\ndate: \"Created on 07 March, 2023\"\nexecute:\n  echo: true\n  output: true\nformat: \n  revealjs:\n    slide-number: c/t\n    show-slide-number: all\n    # mainfont: Arial\n    # fontsize: 14px\n    theme: [default, custom.scss]\n    chalkboard: \n      buttons: true\n    # theme: [serif]\n    # mouse-wheel: true\n    auto-play-media: true\n    width: 1280\n    height: 720\n    fig-dpi: 300\n    # logo: figures/icg.png\nrevealjs-plugins:\n  - pointer\neditor: visual\ndraft: true\n---\n\n\n\n\n## План лекции\n\n-   Виды графиков.\n\n-   Немного про способы визуализации в base R.\n\n-   Введение в `ggplot2`, из чего состоит грамматика графики: aes, geoms, scales, theme.\n\n-   Основные геомы.\n\n-   Пример построения графика с помощью `ggplot2`\n\n## Какие можно вспомнить виды графиков?\n\n::: incremental\n-   Диаграмма рассеяния (scatterplot)\n\n-   Гистограмма (histogram)\n\n-   Барплот (barplot)\n\n    ::: {.callout-note appearance=\"simple\"}\n    Чем барплот отличается от гистограммы?\n    :::\n\n-   ::: {.callout-tip appearance=\"simple\"}\n    Гистограммы для непрерывных величин, а барплоты для категориальных.\n    :::\n\n-   Боксплот (boxplot)\n\n-   Скрипичная диаграмма (violin plot)\n\n-   Pie chart\n\n-   Диаграмма Венна\n\n-   Heatmap, density plot, upset, flowchart и много чего еще...\n:::\n\n# Графики с помощью base R\n\n## Диаграмма рассеяния с помощью функции `plot()`\n\nФункция `plot()` принимает на вход разные входные данные, начнем с колонки `gold` датасета `wc3_units`.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nplot(wc3_units$gold)\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-2-1.png){width=3000}\n:::\n:::\n\n\nЗдесь по оси X - порядковый номер элемента, по Y - значение gold.\n\n## Диаграмма рассеяния с помощью функции `plot()`\n\nОтрисуем зависимость урона `damage` юнитов от затраченного золота `gold`. Как думаете, какую мы ожидаем зависимость?\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nplot(wc3_units$damage, \n     wc3_units$gold)\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-3-1.png){width=3000}\n:::\n:::\n\n\nТочка соответствует каждому юниту и его параметрам.\n\n. . .\n\nМы наблюдаем положительную зависимость между уроном юнита и затраченным на него золотом.\n\n## Гистограммы (histogram)\n\nОтрисуем гистограмму по колонке `gold` датасета `wc3_units`.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nhist(wc3_units$gold)\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-4-1.png){width=3000}\n:::\n:::\n\n\nЧто значат столбики гистограммы?\n\n## Гистограммы (histogram)\n\nМожно подкрасить столбики.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nhist(wc3_units$gold, \ncol=\"coral\", border=\"blue\")\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-5-1.png){width=3000}\n:::\n:::\n\n\n## Боксплоты\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nboxplot(wc3_units$damage)\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-6-1.png){width=3000}\n:::\n:::\n\n\n## Боксплоты по категориям\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nboxplot(damage ~ race, wc3_units)\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-7-1.png){width=3000}\n:::\n:::\n\n\n# `ggplot2` - лучший пакет для визуализации в R\n\n## ggplot2 - grammar of graphics plot\n\nПодход к построению графиков в `ggplot2` принципиально отличается от обычных пакетов визуализации (`matplotlib`, `seaborn` в питоне).\n\n::: columns\n::: {.column width=\"50%\"}\nФишка `ggplot2` состоит в применении языка грамматики графики - набора правил для построения графиков.\n\nТакой подход дает огромную гибкость и возможность создания и кастомизации практически любого графика. Пакет опирается на книгу The Grammar of Graphics (Leland Wilkinson).\n:::\n\n::: {.column width=\"50%\"}\n![](https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/61L6t6eXkGL._AC_UF1000,1000_QL80_.jpg){width=\"383\"}\n:::\n:::\n\n------------------------------------------------------------------------\n\n![](images/ggplot_cake.png)\n\n## Слои в `ggplot2`\n\n::: columns\n::: {.column width=\"30%\"}\nКомпоненты графика:\n\n-   данные (data)\n\n-   аэстетики (aes)\n\n-   геомы (geom)\n\n-   шкалы (scales)\n\n-   разбивка facets\n\n-   оформление (theme)\n:::\n\n::: {.column width=\"70%\"}\n\n![](https://pozdniakov.github.io/tidy_stats/images/ggplot2_scheme.png){width=\"588\"}\n:::\n:::\n\n## Начнем с создания основы графика\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"1-2\"}\nwc3_units %>% \n  ggplot()\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-8-1.png){width=3600}\n:::\n:::\n\n\nЧасто пишут без пайпов: `ggplot(wc3_units)`, однако использование пайпов довольно полезно.\n\n## Добавим `aes()`\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nwc3_units %>% \n  ggplot(aes(x = damage, y = gold))\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-9-1.png){width=3600}\n:::\n:::\n\n\n`aes()` отражает, какие переменные и как мы собираемся использовать в графике. Здесь мы прописали, что по X будет `damage`, по Y `gold`.\n\n## Добавим `geom_`\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nwc3_units %>% \n  ggplot(aes(x = damage, y = gold))+\n  geom_point(size = 4)\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-10-1.png){width=4500}\n:::\n:::\n\n\n`geom_point()` - отрисовывает переменные, поданные в аэстетики (`aes`), в виде точек. Получилась обычная диаграмма рассеяния!\n\n## Добавим регрессионную линию с помощью `geom_smooth()`\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nwc3_units %>% \n  ggplot(aes(x = damage, y = gold))+\n  geom_point(size = 4)+\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-11-1.png){width=4500}\n:::\n:::\n\n\nПо умолчанию линия не прямая, пытается максимально приблизить точки.\n\n## Добавим регрессионную прямую с помощью `geom_smooth(method = 'lm')`\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nwc3_units %>% \n  ggplot(aes(x = damage, y = gold))+\n  geom_point(size = 4)+\n  geom_smooth(method = 'lm')\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-12-1.png){width=4500}\n:::\n:::\n\n\nВ этом случае строится классическая регрессия.\n\n## Добавим `race` юнитов с помощью цвета `color` в `aes()`\n\n\n::: {.cell output-location='column' fig.dpi='600'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nwc3_units %>% \n  ggplot(aes(x = damage, y = gold, \n             color = race))+\n  geom_point(size = 4)+\n  geom_smooth(method = 'lm')\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-13-1.png){width=4500}\n:::\n:::\n\n\nМожно усложнять график, например добавить форму (`shape`) для точек и выделить типы урона.\n\n## Добавим `ground_attack` с помощью формы `shape` в `aes()` {style=\"font-size: 85%\"}\n\n\n::: {.cell output-location='column' fig.dpi='600'}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nwc3_units %>% \n  ggplot(aes(x = damage, y = gold, \n             color = race, \n             shape = ground_attack))+\n  geom_point(size = 4)+\n  geom_smooth(method = 'lm')\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-14-1.png){width=4500}\n:::\n:::\n\n\nОй. Похоже, что `geom_smooth()` зафитил регрессию по разным расам и типам урона, а мы хотели просто изменить форму точек. В таком случае нужно задать в конкретном геоме нужную аэстетику `aes()`.\n\n## Добавим `ground_attack` с помощью формы `shape` в `aes()` `geom_point()`\n\n\n::: {.cell output-location='column' fig.dpi='600'}\n\n```{.r .cell-code  code-line-numbers=\"2,4\"}\nwc3_units %>% \n  ggplot(aes(x = damage, y = gold, \n             color = race))+\n  geom_point(aes(shape = ground_attack), \n             size = 5)+\n  geom_smooth(method = 'lm')\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-15-1.png){width=4500}\n:::\n:::\n\n\n## Барплот - `geom_bar()`\n\nСтандартная задача отрисовать средние и пределы погрешности для статьи или презентации. Для этого нам нужно преобразовать исходные данные - посчитать среднее и стандартное отклонение. Используем уже изученный подход `group_by()` + `summarise()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_mean_damage <- wc3_units %>% \n  group_by(race) %>% \n  summarise(mean = mean(damage, na.rm = TRUE), \n            sd = sd(damage, na.rm = TRUE))\nwc3_mean_damage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  race    mean    sd\n  <chr>  <dbl> <dbl>\n1 Human   27.7  19.9\n2 N.Elf   28.8  17.3\n3 Orc     22.9  17.2\n4 Undead  27.5  27.3\n```\n:::\n:::\n\n\n## Барплот - `geom_bar()`\n\n\n::: {.cell output-location='column' fig.dpi='300'}\n\n```{.r .cell-code  code-line-numbers=\"2,3\"}\nwc3_mean_damage %>% \n  ggplot(aes(x = race, y = mean))+\n  geom_bar(stat = 'identity')\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-17-1.png){width=4500}\n:::\n:::\n\n\n## Барплот - `geom_bar()` с пределами погрешностей\n\n\n::: {.cell output-location='column' fig.dpi='300'}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nwc3_mean_damage %>% \n  ggplot(aes(x = race, y = mean))+\n  geom_bar(stat = 'identity')+\n  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-18-1.png){width=4500}\n:::\n:::\n\n\nСтандартные отклонения получились достаточно большими.\n\n## Боксплот - `geom_boxplot()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_units %>% \n  ggplot(aes(race, hp))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-19-1.png){width=3000}\n:::\n:::\n\n\nЧто отражает боксплот?\n\n## Боксплот\n\n![](https://i.ytimg.com/vi/BE8CVGJuftI/maxresdefault.jpg)\n\n## Violin plot (скрипичная диаграмма) - `geom_violin()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc3_units %>% \n  ggplot(aes(race, hp))+\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-20-1.png){width=3000}\n:::\n:::\n\n\nСкрипичные диаграммы содержат больше информации чем боксплоты, однако в среднем сложнее для интерпретации.\n\n## Работа со шкалами\n\nЭто различные `scale_x_continuous()`, `scale_y_continuous()`, `scale_color_manual()`, выбор зависит от типа шкалы на графике.\n\n\n::: {.cell output-location='column' fig.dpi='600'}\n\n```{.r .cell-code  code-line-numbers=\"6-8\"}\nwc3_units %>% \n  ggplot(aes(x = damage, y = gold, \n             color = race))+\n  geom_point(aes(shape = ground_attack), \n             size = 5)+\n  scale_y_continuous(limits = c(0,600), \n                     breaks = seq(0, 600, 50),\n                     name = 'Затраченное золото')\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-21-1.png){width=4500}\n:::\n:::\n\n\n## Работа с фасетами\n\nЕсть функции `facet_grid()` и `facet_wrap()`, рекомендую последнюю.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nwc3_units %>% \n  ggplot(aes(race, hp, fill = race))+\n  geom_boxplot()+\n  facet_wrap(~armor_type)\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-22-1.png){width=3000}\n:::\n:::\n\n\n## `facet_wrap()`\n\nИспользуем параметр `scales = free`\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"4,5\"}\npl <- wc3_units %>% \n  ggplot(aes(race, hp, fill = race))+\n  geom_boxplot()+\n  facet_wrap(~armor_type, \n             scales = 'free')+\n  ggtitle('Здоровье юнитов')\npl\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-23-1.png){width=3000}\n:::\n:::\n\n\n## Изменение темы\n\nМожно использовать встроенные темы, например `theme_bw()`, `theme_classic()`.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\npl +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-24-1.png){width=3000}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\npl+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-25-1.png){width=3000}\n:::\n:::\n\n\n## Изменение визуального отображения графика\n\nСамостоятельно настраивать элементы графика нужно в функции `theme()`\n\nНапример:\n\n-   Увеличим шрифт подписей оси\n\n-   Изменим цвет\n\n-   Поставим заголовок на центр\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\npl + \n  theme(axis.text = element_text(size = 14),\n        axis.title = element_text(size = 16),\n        plot.title = element_text(hjust = 0.5, color = 'blue'))\n```\n\n::: {.cell-output-display}\n![](statR_lecture5_files/figure-revealjs/unnamed-chunk-26-1.png){width=3000}\n:::\n:::\n\n\n## Диаграммы Венна\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(VennDiagram)\n```\n:::\n\n\n![](https://www.datanovia.com/en/wp-content/uploads/2020/11/venn-diagram-in-r-or-rstudio-ggvenn-1.png){width=\"412\"}\n\n## UpSet\n\nДиаграммы для визуализации пересечения множеств, позволяют отображать больше информации чем диаграммы Венна\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(UpSetR)\n```\n:::\n\n\n![](https://upset.app/assets/images//upsetr.png)\n\n## Материалы для дальнейшего изучения\n\n-   Понятная [презентация](https://pkg.garrickadenbuie.com/gentle-ggplot2/) по `ggplot2`\n\n-   Обзор [расширений](https://t.me/stats_for_science/52) ggplot2\n",
    "supporting": [
      "statR_lecture5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}