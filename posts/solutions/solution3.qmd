---
title: "Решения по третьей лекции"
date: '20 March 2023'
author: 'Elena U'
execute: 
  echo: true
editor: visual
categories: task
draft: true
---

Составлены в формате задание - ответ к нему.

Рассчитано на самопроверку: ваша задача написать такой код, чтобы совпал с моим правильным ответом. Плюс есть еще несколько заданий на подумать и вспомнить материал лекции.

**Не стесняйтесь гуглить**, это необходимо для решения многих задач в программировании, которые могут встретиться в реальной жизни.

Если вдруг найдутся ошибки/опечатки, пишите на почту `e.ubogoeva@alumni.nsu.ru` или в телеграм. Вопросы по заданиям также можно писать на почту или в телеграм, телеграм чуть предпочтительнее.

## Создание функций

-   Создайте функцию `plus_two()`, которая принимает число и возвращает это же число + 2.

-   Проверьте функцию `plus_two()` на числе 40

    ```{r}
    plus_two <- function(x) x + 2
    plus_two(40)
    ```

-   Создайте функцию, которая вычисляет площадь круга на основании радиуса и посчитайте площадь круга радиусом 5 (в R есть встроенная константа `pi`).

    ```{r}
    circle_area <- function(r) pi*r^2
    circle_area(5)
    ```

-   Создайте функцию, которая переводит градусы Цельсия в Фаренгейта. Проверьте на значениях -100, -40 и 0, что функция работает корректно

    ```{r}
    cels2far <- function(x) x * 1.8 + 32
    cels2far(c(-100, -40, 0))

    ```

-   Найдите сумму всех простых чисел от 1 до 100, где 1 не является простым, по возможности используя подход `purrr::map()`.

    ```{r}
    library(purrr)
    is_prime <- function(x) {
      if (x == 1) return(FALSE)
      if (x == 2) return(2)
      if (!any(x %% 2:(x-1) == 0)) return(x) else return(FALSE)
    }
    sum(map_dbl(1:100, is_prime))
    ```

-   Проверьте, является ли число 2023 простым

    ```{r}
    is_prime(2023)
    ```

-   Используя функцию `is_prime()`, создайте функцию `prime_numbers()`, которая выводит все простые числа перед заданным числом. Проверьте на числах 200, 1000.

    ```{r}
    prime_numbers <- function(x) {
      (1:x)[map_dbl(1:x, is_prime) != 0]
    }
    prime_numbers(200)
    prime_numbers(1000)
    ```

    ## Функции семейства `apply()`

-   Создайте список `list3`

    ```{r}
    #| echo: true
    list3 <- list(
      a = 1:5,
      b = 0:20,
      c = 4:24,
      d = 6:3,
      e = 6:25
      )
    ```

-   Посчитайте максимальное значение по каждому элементу списка. Ответ получите в виде списка и в виде вектора.

    ```{r}
    lapply(list3, max)
    map_dbl(list3, max)
    ```

-   Посчитайте максимальное значение в каждой колонке датасета `mtcars`

    ```{r}
    apply(mtcars, 2, max)
    ```
